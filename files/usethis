#!/usr/bin/env python3

import requests
import zipfile
import os
import shutil
import argparse

def download_zip(url, output_folder, file_or_folder_name):
    local_filename = "__temp_download__.zip"
    local_filepath = os.path.join(output_folder, local_filename)

    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filepath, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)

    temp_extract_path = os.path.join(output_folder, "temp_extracted")
    with zipfile.ZipFile(local_filepath, 'r') as zip_ref:
        zip_ref.extractall(temp_extract_path)

    extracted_content = os.listdir(temp_extract_path)
    if len(extracted_content) == 1:
        extracted_path = os.path.join(temp_extract_path, extracted_content[0])
    else:
        extracted_path = temp_extract_path

    final_destination = os.path.join(output_folder, file_or_folder_name)
    if os.path.exists(final_destination):
        shutil.rmtree(final_destination)

    shutil.move(extracted_path, final_destination)
    os.remove(local_filepath)
    if os.path.exists(temp_extract_path):
        shutil.rmtree(temp_extract_path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Download and extract a ZIP file (e.g., from Dropbox).')
    parser.add_argument('file_or_folder_name', type=str, help='The name to assign to the extracted file or folder.')
    parser.add_argument('--dest', type=str, default=os.getcwd(), help='The output folder for extraction. Defaults to the current directory.')
    parser.add_argument('url', type=str, help='The URL of the ZIP file to download.')

    args = parser.parse_args()

    output_folder = args.dest
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    download_zip(args.url, output_folder, args.file_or_folder_name)
    print(f"Downloaded and extracted ZIP file from {args.url} to {os.path.join(output_folder, args.file_or_folder_name)}")